name: Cross-Plattform Build & Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "dev**", "release**" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu_latest
          - arch: aarch64
            distro: fedora_latest
          - arch: ppc64le
            distro: ubuntu_latest
          - arch: s390x
            distro: ubuntu_latest

    steps:
    - uses: actions/checkout@v3
    - uses: uraimo/run-on-arch-action@v2
      name: Build artifact
      id: build
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}

        # Mount the artifacts directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}:/workplace"

        # Pass some environment variables to the container
        env: | # YAML, but pipe character is necessary
          BUILD_TYPE: ${{ env.BUILD_TYPE }}

        # The shell to run commands with in the container
        shell: /bin/sh

        # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          case "${{ matrix.distro }}" in
            ubuntu*)
              apt-get update -q -y
              apt-get install -q -y git cmake g++ dpkg
              ;;
            fedora*)
              dnf -y install git cmake g++ fedora-packager rpmdevtools
              ;;
          esac

        # Produce a binary artifact and place it in the mounted volume
        run: |
          git config --global --add safe.directory /workplace
          find /workplace/externals -maxdepth 1 -type d -exec bash -c 'git config --global --add safe.directory ${0%}' {} \;

          cd /workplace
          cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cd ./build
          cmake --build . --config ${{env.BUILD_TYPE}}
          ctest -C ${{env.BUILD_TYPE}} --output-on-failure

          case "${{ matrix.distro }}" in
            ubuntu*)
              cpack -G DEB
              cpack -G TGZ
              ;;
            fedora*)
              cpack -G RPM
              ;;
          esac
          
    - name: Upload artefact
      uses: actions/upload-artifact@v3
      with:
        path: ${{github.workspace}}/_packages/



  build-fedora-x64:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    name: Build on fedora linux

    steps:
    - uses: actions/checkout@v3
    - uses: uraimo/run-on-arch-action@v2
      name: Build artifact
      id: build
      with:
        arch: none
        distro: none
        base_image: fedora

        # Mount the artifacts directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}:/workplace"

        # Pass some environment variables to the container
        env: | # YAML, but pipe character is necessary
          BUILD_TYPE: ${{ env.BUILD_TYPE }}

        # The shell to run commands with in the container
        shell: /bin/sh

        # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          dnf -y update
          dnf -y install git cmake g++ fedora-packager rpmdevtools

        # Produce a binary artifact and place it in the mounted volume
        run: |
          git config --global --add safe.directory /workplace
          find /workplace/externals -maxdepth 1 -type d -exec bash -c 'git config --global --add safe.directory ${0%}' {} \;

          cd /workplace
          cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cd ./build
          cmake --build . --config ${{env.BUILD_TYPE}}
          ctest -C ${{env.BUILD_TYPE}} --output-on-failure
          cpack -G RPM
          
    - name: Upload artefact
      uses: actions/upload-artifact@v3
      with:
        path: ${{github.workspace}}/_packages/