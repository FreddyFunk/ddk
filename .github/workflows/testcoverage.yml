name: coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  test-coverage:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Install report tools
      run: sudo apt-get update -q
        && sudo apt-get upgrade -q -y
        && sudo apt-get install lcov -q -y

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCODE_COVERAGE=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test and record coverage
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure --serial -C ${{env.BUILD_TYPE}} --coverage

    - name: Generate lcov report for tested code
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: lcov --capture --directory ./src --output-file tested.info

    - name: Generate lcov report for not-tested code
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: lcov --capture --directory ./src --initial --output-file not-tested.info

    - name: Merge lcov report for tested and not-tested code
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: lcov -a tested.info -a not-tested.info --output-file coverage.info

    - name: Remove C++ templates & inlines headers
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: lcov --extract coverage.info '*/ddk/src/*' --output-file coverage.info

    - name: Generate HTML
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: genhtml coverage.info --output-directory out

    - name: Archive code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: ${{github.workspace}}/build/out/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        #token: ${{ secrets.CODECOV_TOKEN }}
        #directory: ./build/src
        #env_vars: OS,PYTHON
        #fail_ci_if_error: true
        #files: ./coverage1.xml,./coverage2.xml
        flags: unittests
        verbose: true
